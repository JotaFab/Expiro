// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: links.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activeLinksByUser = `-- name: ActiveLinksByUser :many
SELECT id, user_id, file_path, expires_at, max_downloads, downloads, created_at FROM links
WHERE user_id = $1 AND expires_at >= NOW()
ORDER BY created_at DESC
`

func (q *Queries) ActiveLinksByUser(ctx context.Context, userID int64) ([]Link, error) {
	rows, err := q.db.Query(ctx, activeLinksByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FilePath,
			&i.ExpiresAt,
			&i.MaxDownloads,
			&i.Downloads,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createLink = `-- name: CreateLink :one
INSERT INTO links (user_id, file_path, expires_at, max_downloads)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, file_path, expires_at, max_downloads, downloads, created_at
`

type CreateLinkParams struct {
	UserID       int64
	FilePath     string
	ExpiresAt    pgtype.Timestamptz
	MaxDownloads pgtype.Int4
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRow(ctx, createLink,
		arg.UserID,
		arg.FilePath,
		arg.ExpiresAt,
		arg.MaxDownloads,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FilePath,
		&i.ExpiresAt,
		&i.MaxDownloads,
		&i.Downloads,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM links
WHERE id = $1
`

func (q *Queries) DeleteLink(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteLink, id)
	return err
}

const expiredLinks = `-- name: ExpiredLinks :many
SELECT id, user_id, file_path, expires_at, max_downloads, downloads, created_at FROM links
WHERE expires_at < NOW()
`

func (q *Queries) ExpiredLinks(ctx context.Context) ([]Link, error) {
	rows, err := q.db.Query(ctx, expiredLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FilePath,
			&i.ExpiresAt,
			&i.MaxDownloads,
			&i.Downloads,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinkByID = `-- name: GetLinkByID :one
SELECT id, user_id, file_path, expires_at, max_downloads, downloads, created_at FROM links
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLinkByID(ctx context.Context, id int64) (Link, error) {
	row := q.db.QueryRow(ctx, getLinkByID, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FilePath,
		&i.ExpiresAt,
		&i.MaxDownloads,
		&i.Downloads,
		&i.CreatedAt,
	)
	return i, err
}

const incrementDownload = `-- name: IncrementDownload :one
UPDATE links
SET downloads = downloads + 1
WHERE id = $1
RETURNING id, user_id, file_path, expires_at, max_downloads, downloads, created_at
`

func (q *Queries) IncrementDownload(ctx context.Context, id int64) (Link, error) {
	row := q.db.QueryRow(ctx, incrementDownload, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FilePath,
		&i.ExpiresAt,
		&i.MaxDownloads,
		&i.Downloads,
		&i.CreatedAt,
	)
	return i, err
}

const listLinksByUser = `-- name: ListLinksByUser :many
SELECT id, user_id, file_path, expires_at, max_downloads, downloads, created_at FROM links
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListLinksByUserParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

func (q *Queries) ListLinksByUser(ctx context.Context, arg ListLinksByUserParams) ([]Link, error) {
	rows, err := q.db.Query(ctx, listLinksByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FilePath,
			&i.ExpiresAt,
			&i.MaxDownloads,
			&i.Downloads,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
